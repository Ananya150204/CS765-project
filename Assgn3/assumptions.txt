min and maximum micro tokens ka range assumption likhna h

methods is an auto-generated object provided by Web3.js (or Ethers.js has similar things) when you create a contract instance from an ABI.

.call() is like → read-only remote procedure call. Executes the function right now on the latest blockchain state — but only locally, without creating a transaction.

.toString() is used because Web3.js .send() expects string values for large numbers (especially for uint256 in Solidity) to avoid precision loss.

in Web3.js (and even in Ethers.js) → .call() returns everything (especially numbers) as string.

calculate fees is by calculating the share of DEX before withdrawal (given by calculate_fees function). Post withdrawal of liquidity again u calculate the share of DEX. Subtract 2 from 1 to get fees which withdrawer gets.

total_reservesA is an array like:
[ '1000000000000000000', '1200000000000000000', '1400000000000000000' ]
join('\n') converts it to a single string like:

1000000000000000000
1200000000000000000
1400000000000000000


Enlist all the measures you took in your report.



const tokenMetadata = JSON.parse(await remix.call('fileManager', 'getFile', 'browser/contracts/artifacts/Token.json'));
const dexMetadata = JSON.parse(await remix.call('fileManager', 'getFile', 'browser/contracts/artifacts/DEX.json'));
Reads the compiled contract files from Remix (browser storage).

These JSON files contain:

abi → Function definitions (needed to interact)

bytecode → Compiled contract code (needed to deploy)



const tokenABI = tokenMetadata.abi;
const dexABI = dexMetadata.abi;
→ Used to tell Web3:

"Here’s how the functions of this contract look like."



const tokenAFactory = new web3.eth.Contract(tokenABI);
const tokenBFactory = new web3.eth.Contract(tokenABI);
const dexFactory = new web3.eth.Contract(dexABI);
These are blueprints (not deployed yet).

Using the ABI — ready to deploy or interact.


const tokenA = await tokenAFactory.deploy({
    data: tokenMetadata.data.bytecode.object,
    arguments: [(BigInt(400000) * SCALE).toString()]
}).send({ from: owner, gas: 50000000 });
Same for tokenB

Deploying ERC20 tokens with initial supply 400000 * SCALE

.deploy() → prepares deployment.

.send() → sends the transaction to blockchain.




Calculation of fees -> Rule 1 -- Minting and burning of LPT will always be preceded by updateEarnings.

cumulativeFeePerLPTokenA -- Totalfees/(TotalLPTokens_At_That_Time)
userLastCumulativeFeeA[user] -- ye ek map hai jo ye bata raha ki kitni fees tak ka hisaab ho gaya
deltaA ye batayega ki nayi fees kitni hai (since the last hisaab)

swap main totalLPSupply se isliye divide kar rahe hai kyunki maanlo baad main kisine addLiquidity kiya to usko bhi account kar loge totalLPSupply main jo ki nahi karna tha. 

In a hisaab period userBalance remains the same because if it changes in between hisaab takes place as per rule 1.

Eg - Suppose 5 log the with 1 LPT each. Suppose profit earned = 5A. So each gets 1A profit.

Now say another LP comes. He also gets 1 LPT.

Again DEX earn 5A profit.
Now each should get 5/6A profit. 

If we had not done hisaab earlier and calculated profit now, each one would be getting (5+5)/6 profit which is blatantly wrong.

